export default {
  book_title1: "",
  book_title2: ``,
  book_title3: ``,
  book_title4: ``,
  book_title5: " 🎮",
  page1_1: `前書き

  1. まえがき
  
    ブロックチェーンアプリ開発のイメージはどのようなものでしょうか?
  
    Flow Blockchain にはBlocto というウォレットがあり、Crypto Currencyの送金やNFTウォレットの作成はとても簡単です。
  
    送金が簡単、ウォレットをすぐ作れる、ということは世界中の人とお金や物をすぐにやりとり出来る、ということです。この書籍を出版するときも、謝礼を払いたいからBloctoのウォレットアドレスを教えてと気軽に言え、実際トランザクションは５秒ほどで終わり全くストレスがありません。
  
    それもFlow が極めて安全性を考えて作られ、事故もなく、透明性の高いブロックチェーンである事から、ストレスを感じる要素を見つける方が難しいくらいです。
  
    Flow Blockchain のWebsite では開発者にフレンドリーである、とあります。それは本当でPlay Groundで開発すると誰とでもソースコードを共有でき、FlowのDiscordでそれを共有すればすぐに誰かが回答してくれます。これもPlay GroundやFlow Client Library (FCL) を開発者の為に考えられて開発されているからで、この開発者サポート体制もFlowの強みの一つです。
  
    イーサリアムのNFTであるERC721を提出したのがFlow Blockchainの生みの親であるDapperのCTOであることから、NFTの新機能はほぼ間違いなくFlowの強みとなっていくと考えられます。今後、Flow Blockchain を使ったNFT開発は加速的に普及していくでしょう。
  
    ただし、Flow BlockchainのNFT構築は初めての方にはどう実装していいか分かりにくく、また書籍も無いことから参考にできる情報も少ない状態です。
  
    特にStable Cadenceが2022年6月に登場した後は、Breaking Changeが発生前と発生後のコントラクトが入り乱れ、また、それに対する情報収入は既に開発した経験者には分かりやすいのですが、新しくCadenceを学ぼうという方にはなかなか高いハードルとなっています。
  
    本書はこのCadenceを使ったスマートコントラクトの書き方と実際にゲームをリリースするまでの手順を記しました。ゲームを中心にFlow ブロックチェーンはとても魅力的なプラットフォームです。世界中の人と価値のあるNFTを交換したり、又はCrypto Currencyで支払うことができるため、また、それ自体が非常に高速に行える為、開発者は自らのアイデアでその上に好きなBlockchainシステムを構築することが出来ます。初心者が引っかかりやすいところをわかりやすく、NFTを作るという最初の壁を越えられるところまで一緒になって説明しますので、ぜひ本書を手に取って、Dappと言われるブロックチェーンアプリの作る楽しさを知っていただき、この世に新たなシステムを構築してほしいと思います。
  `,
  page1_2: `  Dapper アジアゲーム部門戦略担当者Chris氏にはこの本を出版する機会を頂き、大変感謝致します。
  また、コミュニティマネージャであり、プロダクトマネージャであるLayne氏には本書のプロジェクトの遂行に最後までサポートしていただき感謝します。
  Flow Core DeveloperであるVishal氏にはFlow BlockchainとCadenceの仕様における執筆内容を監修していただきました。この場を借りて御礼申し上げます。
  
  Takashi Tahara`,
  page1_3: ``,
  page1_4: ``,
  page1_5: ``,
  page2_1: '1 . 1 Cadence を始めてみよう',
  page2_2: `CadenceとはFlow Blockchainで使うスマートコントラクト言語です。
  Cadenceは以下の場所で利用できます。
  
  * スマートコントラクト
  * トランザクション
  * スクリプト

  ブロックチェーンにはEthereumやPolygonなど様々ありますが、これらブロックチェーンの中でスマートコントラクト言語がどう利用されるかご存知でしょうか？
  
  (1) ブロックチェーンの中にあるスマートコントラクトそのもの
  (2) スマートコントラクトを変更するトランザクション部分
  (3) スマートコントラクト内の情報をJavaScriptのライブラリから取得したり変更したりする部分
  
  Flow Blockchainはスマートコントラクト言語としてCadenceを、EthereumとPolygonはSolidityを採用しています。そして、これらのスマートコントラクト言語がどこで、どのように動作しているのかを説明します。`,
  page2_3: `Flowのスマートコントラクト言語であるCadenceの場合、(3)で使用されているライブラリは、FCL（Flow Client Library）と呼ばれるJavaScriptライブラリです。

  Solidityの場合、(3)で使用するライブラリは、web3.jsなどのJavaScriptライブラリです。
  
  そして、それぞれがブロックチェーンにトランザクションを渡すことで、ブロックチェーンの修正処理を書き込みます。この処理が(2)の動きです。
  
  Cadenceの場合、トランザクションはスマートコントラクトのメソッドを呼び出し、どのように変更すべきかを示す引数を渡します。ただし、呼び出しのプロセスは柔軟に変更することができます。
  
  Solidityの場合、トランザクションはスマートコントラクトのメソッドを呼び出し、どのように変更すべきかを示す引数を渡します。
  
  こうしてみると、CadenceとSolidityは言語が違うだけで、全く同じように動作することがわかります。しかし、Cadenceの方が簡単です。
  
  Cadenceの場合、②の処理は後からCadenceで書くことができますが、Solidityの場合、②の処理はスマートコントラクト内のメソッドを呼び出すだけということになるので、柔軟に変更することはできません。
  
  そのため、Solidityの世界での設計は時間がかかります。
  
   Solidityでは、(2)の処理はすべてスマートコントラクトに組み込まれています。変更にはデプロイが必要で、時間がかかり、時にはコストもかかります。
   Cadenceでは、(2)をコール内部で処理するコードをCadenceで書くことができるので、変更に対応できる設計をすることに神経質にならなくてもよいのです。
  
  とはいえ、スマートコントラクトのメソッドを呼び出さないとトランザクションが実行できないため、Cadenceもセキュリティが低下することはありません。
  `,
  page2_4: ``,
  page2_5: ``,
  page3_1: `1 . 2 結局、ブロックチェーンって何？

  ブロックチェーンは、その中に価値を保存することができます。そして、スマートコントラクトはその動きを決定することができる。
  スマートコントラクトが登場するまでは、その動きを決定するためにプログラムすることはできませんでした。
  
  スマートコントラクトは、プログラムで作る取り決めなのです。このことが、分散化という言葉に重みを与えています。なぜなら、スマートコントラクトがブロックチェーン上に配置されると（「デプロイ」といいます）、そのスマートコントラクトの作成者がその内容に逆らうことはできなくなります。`,
  page3_2: `1 . 3 スマートコントラクトでどのようなプログラムを組めばいいの ?
  
  何でもかまいません。

  一度ブロックチェーンに取り込んだ価値は他人が変更することができないので、簡単に有効活用できるプログラムを作ることができます。
  
  例えば、トレーサビリティをきちんと追跡するためのソフトウェアを開発したいが、ブロックチェーン上にスマートコントラクトを書いて、情報が改ざんされないようにする。
  
  例えば、地球温暖化を防ぐために、どの国の権力者でも変えられない、世界中の誰にでも平等なルールをスマートコントラクトとして適用し、船や電車で効率的に移動できない車両運搬船には罰金を課したい。
  
  こうやって書けば、何でも書けることがお分かりいただけると思います。`,
  page3_3: ``,
  page3_4: ``,
  page3_5: ``,
  page4_1: `1 . 4 フローブロックチェーンを使ったビジネスに向いている業界は？

  これは私の意見ですが、ゲーム業界は向いていると思います。前述の通り、スマートコントラクトには何でも書けるのですが、ブロックチェーンは新しい技術なので、世界中の人が使い方を知っているわけではありません。
  
  それに対して、ゲームは世界中で楽しまれていますし、ブロックチェーンゲームの場合、ブロックチェーンで使われるトークンの価値は世界共通なので、収益を一気に世界共通にすることが可能です。
  
  また、ブロックチェーンゲームは基本的にインターネットさえあれば可能なので、ゲームを作ればすぐに世界中に公開することができます。収益も、クレジットカードなどを持っていない人を排除する必要がありません。
  
  このようなブロックチェーンゲームの特徴を見て、何か気づくことはないでしょうか。そう、ビジネス環境が整っていない国であっても、世界中にリーチしやすいのです。`,
  page4_2: ``,
  page4_3: ``,
  page4_4: ``,
  page4_5: ``,
  page5_1: `  ブロックチェーンゲームは

  *クレジットカード会社は不要です。
  *銀行も必要ありません。
  *インターネットに接続できる環境であれば、プライベートネットワーク会社は不要です。(個人情報を扱わないという条件付きです)
  
    そう、世界中の人が平等な条件でゲームを作ることができるのです。今までは、このような制約がある国では、全世界に配信するゲームを開発することは困難でした。(今はマネーロンダリング対策など、より多くの制約がありますが......）。
  
    ブロックチェーンがアフリカで注目されていることをご存知ですか？
  アフリカはブロックチェーン技術で世界の最先端技術を一気に手に入れられる可能性があります。南アフリカだけでなく、ナイジェリアやケニアなど赤道付近の大国は英語が公用語なので、最先端技術の情報を入手しやすく、ブロックチェーンは途中の開発段階を飛ばして、世界の最先端技術に一気に追いつくリープフロッグという現象を起こす可能性を秘めているのです。
  
    今、この本はKindleで電子書籍として出版されていますが、もし暗号資産で支払いができたら、銀行やクレジットカードも必要なく、とても便利ですよね。
  
    余談が長くなりましたが、次ページから、Cadenceを使ったシステム開発の技術解説に入ります。`,
  page5_2: ``,
  page5_3: ``,
  page5_4: ``,
  page5_5: ``,
  page6_1: `Cadence - スマートコントラクト言語 - の特徴`,
  page6_2: ``,
  page6_3: `Cadenceは、開発者が致命的なバグを犯しやすいSolidityの欠点に着目し、開発者サイドに立った言語作りに力を注いでいます。

  以下のWebページでは、Cadenceの5つの柱について説明されています。そこでは、それぞれ以下のように説明されています。
  
  https://developers.flow.com/cadence
  
  安全・安心・・・これがCadenceの最も重要な特徴であり、Cadenceらしさでもあります。言語仕様が開発者本位であるため、脆弱なプログラムを作成することは困難です。また、NFT資産を受け取るユーザーのセキュリティを確保する意味もあります。
  
  明瞭性・・・コードの読みやすさ、目的の明確さ、ソースコードに曖昧さがないこと。特に、リソースは必ずどこかに移動させなければならないという言語仕様（リソース指向プログラミング）があり、リソースを保存するか破棄しないとプログラムが終わらないという厳しい仕様になっています。
  
  親しみやすさ・・・スマートコントラクトの開発者向けに、プログラミング言語による親しみやすさを提供します。
  
  開発者エクスペリエンス・・・上記に加え、開発中のモチベーションを損なわないような仕様とツールで開発支援を行います。
  
  リソースを直感的に所持する権利... Cadenceは、NFTに代表されるリソースを保持し、それを最大限に活用できるように設計されています。`,
  page6_4: ``,
  page6_5: ``,
  page7_1: `SolidityとCadenceの違い`,
  page7_2: `  主な違いは、個人のアカウント情報を保存するためのソフトウェアであるウォレットです。ウォレットには、ユーザーだけが扱えるようにするためのセキュリティ機能が必要です。Solidityはウォレットにメタマスクを使用しますが、Cadenceは使用しません。
  個人が自分でセキュリティを管理したい場合は、BloctoのNon Custodialウォレットなどを使用することができます。`,
  page7_3: ``,
  page7_4: `Flow Blockchainがメタマスクを使用しない理由`,
  page7_5: `  というのも、まず一般の方が利用するのは難しいからです。ウォレットキーを自分で管理する必要があるという人もいるかもしれませんが、それだとゲームをプレイしてもらえません。
    Flow Blockchainの開発者は、Crypto Kittiesというゲームの開発者だったので、一般の人が使いやすいブロックチェーンを作りたかったのです。
  
    2つ目の理由は、セキュリティです。セキュリティを強固にするためには、どのブロックチェーンにも依存しないメタマスクでは、Flow Blockchainのユーザーがウォレットで資産を失う可能性があるからです。
  
    ブロックチェーンがユーザーにとって安全であるために、Flowのコア開発チームはメタマスクを使用しないことを選択し、さらに安全な仕様のウォレットを策定したのです。`,
  page8_1: `Flowブロックチェーンのウォレット`,
  page8_2: `  Flow BlockchainのデファクトスタンダードウォレットはBloctoです。このウォレットは、AndroidやiOSにアプリをダウンロードした時点で、ウォレット会社がキーを管理するようになっています。しかし、後でキーを変更して自分で管理することも可能です。

    また、Bloctoはアプリをダウンロードしなくても、Webブラウザ内でアカウントを作成することができます。そのため、ゲームを始めるには、Webブラウザーがあれば大丈夫です。ただし、NFTを閲覧したり、暗号資産を交換したりしたい場合は、アプリをダウンロードした方がはるかに便利です。`,
  page8_3: `その他の違い`,
  page8_4: `  誤解を招かないように伝えるのが難しいのですが、1.1で書いたように、基本的には同じです。

  Flow Blockchainがセキュリティを重視するあまり、ブロックチェーンそのものの分散性を邪魔しているかというと、そうではありません。それどころか、Flowのコア開発チームは、常にブロックチェーンの分散性を第一に考えた開発ロードマップを持ち、それに従って実装・発表してきました。

  JavaScriptのライブラリを通じてブロックチェーンの情報を取得したり、スマートコントラクト内に保持される値を変更したりすることも、まったく同じです。

  Flow BlockchainのCadenceはSolidityよりずっと後に登場したため、その欠点が解消されているという特徴があります。

  Solidityは有名で、多くのブロックチェーンがSolidityを扱うEVM（Ethereum Virtual Machine）を使っていますが、セキュリティ上の懸念があります。
SolidityがNFTの資産を安全に移転する実装に適していなかったためか、またNFTを提案したのがFlow BlockchaionのCTOだったためか、Flow Blockchainは独自のスマートコントラクト言語「Cadence」を開発しました。`,
  page8_5: ``,
  page9_1: `Cadenceにしかできないこと`,
  page9_2: `多くあります。1.1で述べたように、Solidityは基本的にスマートコントラクトにトランザクションのコードを埋め込むので、JavascriptとSolidityの間で完全に分業しています。そのため、開発時に少し面倒なことがあります。普段からWeb開発をしている人であれば、バックエンドを開発しながらフロントエンドを開発する方が効率的です。実際、AWSのAmplifyやGoogleCloudのFirebaseを使えば、フロントエンドのソースコードを書きながら、クラウドサーバーのソースコードも書くことができるのです。

  AmplifyやFirebaseが急成長しているのは、この利便性のためです。
  
  Cadenceでは、JavaScriptのライブラリにCadenceのコードを渡すことができるので、フロントエンドのコードと並行して開発することができます。Cadenceの開発に関わると、Solidityの開発は少しまどろっこしく感じることがあります。
  
  冒頭で、時間を惜しまずあっという間にデプロイできるからこそ、様々な分野のシステム開発に活用できると書きました。また、監査が必要ないケースも多々あります。Solidityは罠が多く、安全にコーディングするためには監査が必要ですが、Cadenceなら開発者自身がコードをチェックできます。`,
  page9_3: ``,
  page9_4: ``,
  page9_5: ``,
  page10_1: `Cadenceで開発をしよう!`,
  page10_2: `Cadenceを書くために`,
  page10_3: `パソコンを用意します。
  また、プログラムを書くためのエディターと呼ばれるソフトと、インターネット経由でソフトをダウンロードするなどのコマンドを実行するためのソフトが必要です。
  前者については、本書ではVSCodeというソフトを使用します。
  後者については、Macの場合、ターミナルというソフトウェアがデフォルトでインストールされています。
  Windowsの場合は、VSCodeにターミナルと同じ役割を果たす機能があります。
  
  インターネット環境があれば、誰でもスマートコントラクトを書き、ブロックチェーン上に展開することができます。`,
  page10_4: ``,
  page10_5: ``,
  page11_1: `開発環境の準備`,
  page11_2: `それぞれのソフトの起動方法は以下の通りです。

  お使いのパソコンのOSに合わせて、以下のURLからVSCodeをダウンロードし、インストールしてください。
  URL: https://code.visualstudio.com/download`,
  page11_3: `ターミナルは、「アプリケーション」フォルダを開き、「ユーティリティ」フォルダを開くと見つけることができます。`,
  page11_4: `OSがWindowsの場合、VSCodeアプリケーションに存在するTerminalを使用します。
  VSCodeを開き、右上にある以下のトグルを押してください。`,
  page11_5: `画面の下のペインにTerminalが表示されます。
  Terminalのあるペインの右上にある「+」ボタンをクリックするとシェルを変更することができます。`,
  page12_1: `次に、Node.jsをインストールします。

  お使いのパソコンのOSに合わせて、以下のURLからNode.jsをダウンロードし、インストールしてください。
  
  URL: https://nodejs.org/en/download/`,
  page12_2: ``,
  page12_3: ``,
  page12_4: ``,
  page12_5: ``,
  page13_1: `次に、Flow CLIをインストールします。

  Macの場合、Terminal上で以下のコマンドを実行します。
  
  *Macの場合`,
  page13_2: `brewがインストールされていない場合は、/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh) "のコマンドを実行してインストールしてみてください。`,
  page13_3: `Windowsの場合、Terminal上で以下のコマンドを実行してください。

  *Windowsの場合`,
  page13_4: `これでパソコン環境の準備は完了です。`,
  page13_5: ``,
  page14_1: `CadenceでHello, Worldを書いてみよう`,
  page14_2: `Now let's write some Hello, World code and run it.

  This can actually be tried in the browser as well. Open the following URL in your browser and click on the Flow Playground link.
  
  URL: https://developers.flow.com/cadence/tutorial/02-hello-world`,
  page14_3: `Cadence PlaygroundのWebページが表示されます。左端にある「0x01」のリンクを選択します。`,
  page14_4: `0x01は、0x01のアカウントを指します。

  この画面では、0x01がデプロイしたスマートコントラクトが表示されています。
  
  このスマートコントラクトが格納されている場所は、FLOWトークンやNFTなどのリソースが格納されているストレージと基本的に同じです。
  
  実は、このスマートコントラクトのコードを確認できるWebページがあり、その画面には保有しているFLOWトークンの数も表示されています。アカウントには、トークンなどのリソースを保管する場所と、デプロイされたスマートコントラクトを保持する場所があると考えればよいでしょう。
  
  *デプロイ：ブロックチェーン上に配置すること`,
  page14_5: ``,
  page15_1: `0x01をクリックすると、Webブラウザに以下の画面が表示されます。`,
  page15_2: `赤枠で示したのが0x01で展開されているコントラクトです。このコントラクトを参照することで、他のアカウントはこのコントラクトの情報を得ることができます。(Play Groundでは1つのデプロイメントしかできませんが、1つのアカウントで複数のコントラクトをデプロイすることが可能です)

  百聞は一見にしかずということで、Hello Worldのコントラクトを書いてみましょう。`,
  page15_3: `self.greeting = "Hello, World!" を次のように変更してみましょう。`,
  page15_4: `そして、右上のデプロイボタンを押してください。`,
  page15_5: ``,
  page16_1: `画面下に以下のように表示されます。`,
  page16_2: `ブロックチェーン上にスマートコントラクトをデプロイすると、このような表示が出ます。このブロックチェーンは、エミュレータ上のブロックチェーンです。`,
  page16_3: `これで、このアドレスを参照すれば、どこからでもこのスマートコントラクトの情報を見ることができます。

  画面左下の「SCRIPT TEMPLATES」にある「General Script」をクリックします。`,
  page16_4: `画面には以下のように表示されます。`,
  page16_5: ``,
  page17_1: `ここでは、次のようにコードを書いてみましょう。`,
  page17_2: `0x01アカウントのHelloWorldスマートコントラクトのhelloメソッドが呼び出されます。`,
  page17_3: `画面右上の「Execute」ボタンをクリックします。`,
  page17_4: `すると、青枠で囲った部分に以下のように表示されます。`,
  page17_5: `これで、最初のブロックチェーンアプリ「HelloWorld」ができました。

  次に、スマートコントラクトの情報を変更してみましょう。`,
  page18_1: `アカウント0x01に戻り、以下の赤で示したようなコードを追加しましょう。また、3行目のpub letをpub varに変更します。`,
  page18_2: `letが付くと変数は変更ができませんが、varであれば変更ができます。
  変更が終わったら右上のDeployボタンを押してみましょう。`,
  page18_3: `画面左下の「TRANSACTION TEMPLATES」の下にある「Simple Transaction」をクリックします。`,
  page18_4: ``,
  page18_5: ``,
  page19_1: `画面には以下のように表示されます。`,
  page19_2: `ここでは、次のようにコードを書いてみましょう。赤字の部分が追加される部分です。`,
  page19_3: `この状態で、右上の送信ボタンを押してみてください。画面下に「さようなら、私のスマートコントラクト！」と表示されれば成功です。`,
  page19_4: `これで、ブロックチェーン上のスマートコントラクトに変更を加えました。

  次は、もっと本格的な開発に入りましょう。`,
  page19_5: ``,
  page20_1: `Cadenceでソフトウェアを作成するには`,
  page20_2: `ブロックチェーンの取引は、アカウントの承認を得て行われます。前回のトランザクションで言えば、以下の部分です。このprepareメソッドにはAuthAccount型の引数があり、これはウォレットで承認される際に引数として渡されるアカウントのオブジェクトである。`,
  page20_3: `このAuthAccountオブジェクトは、スマートコントラクトの情報に対する変更を実行するために使用されます。そうでなければ、誰でもスマートコントラクトを変更することができます。`,
  page20_4: ``,
  page20_5: ``,
  page21_1: `AuthAccountを使用したprepareメソッド`,
  page21_2: `多くの場合、実際のトランザクションは以下のようにAuthAccountを使用して実行されます。以下では、AuthAccount、つまりトランザクションの認可者が、自身のストレージにあるMyNFTCollectionスマートコントラクトからCollectionリソースへの参照を取得しています。`,
  page21_3: `当然ながら、この処理はストレージを所有するアカウント自身によってのみ実行可能です。
  したがって、ストレージの所有者から認可されたオブジェクトであるAuthAccountが、このトランザクションにおいて最も重要な役割を果たします。
  
  もう一つの役割として、"Capability "があり、これは他のアカウントのストレージにNFTを預けるなど、他のアクションを実行するために使用することができます。" Capability "はリソースインターフェイスを使用して定義されます。リソースインターフェイスの詳細については、「6 リソースインターフェイス」を参照してください。本書は開発フローで解説していますので、詳しくは8章のリファレンスを参照してください。`,
  page21_4: ``,
  page21_5: ``,
  page22_1: `NFTスタンダード`,
  page22_2: `次に、NFTコントラクトを作成しましょう。
  Cadence Playground の Web ページが表示されたら、画面左側の 0x01 をクリックします。
  
  (途中で難しくなった場合は、本書末尾のリファレンスを適宜参照してください。)`,
  page22_3: `0x01をクリックすると、Webブラウザに以下の画面が表示されます。`,
  page22_4: ``,
  page22_5: ``,
  page23_1: `これをNon Fungible Token Standardに変更します。

  Non Fungible Token Standardは、FlowコアチームのGithubに掲載されています。
  
  URL: https://github.com/onflow/flow-nft/blob/master/contracts/NonFungibleToken.cdc
  
  (ここでは、masterではなく、standard-v2またはstable-cadenceのブランチを選択してください)
  
  ここの内容をコピーして、0x01アカウントのコントラクトスペースに貼り付けてください。`,
  page23_2: `2022/12/21現在、masterブランチに以下のgetViewsとresolveViewsが存在しますが、これが存在するとPlay Groundはエラーになります。現時点では、エラーを回避するためにコメントアウトしています。将来的にはPlay Groundが対応する予定です。新しいメソッドがなくても、NFTのバージョンが違うだけなので、問題ありません。`,
  page23_3: `2022/12/21現在、Play Groundに以下のメソッドがあり、masterブランチに以下のborrowNFTSafeメソッドがある場合、エラーが発生します。現時点では、以下のborrowNFTSafeをコメントアウトすることで、エラーを回避しています。将来的にはPlay Groundが対応する予定です。新しいメソッドがなくても、NFTのバージョンが違うだけで、問題ありません。`,
  page23_4: `ページが長くなるのを防ぐため、コメントを削除しています。`,
  page23_5: ``,
  page24_1: `これはインターフェースと呼ばれ、コントラクトが実装しなければならないメソッドとステートをリストアップしています。

  インターフェイスには、コントラクトインターフェイスとリソースインターフェイスの2種類があります。`,
  page24_2: `コントラクトインタフェースはスマートコントラクトが準拠しなければならない項目を列挙し、リソースインタフェースはリソースが準拠しなければならない項目を列挙します。リソースインターフェイスについては、「6 リソースインターフェイス」も参照してください。

  このインターフェースは、Flowのコアチームが策定したNFT標準であり、リソースがNFTとして実装されるために準拠しなければならないインターフェースとされています。
  
  準拠すると、世界中のウォレットやマーケットプレイスでNFTとしてみなされ、表示されるようになります。
  
  Flow Blockchainはまだ新しいブロックチェーンであるため、今後仕様が追加される予定ですが、現時点では破壊的な変化はないと思われます。
  (現在、Discordでコア開発者が話している内容によると、「Stable Cadence」が最後の破壊的な変化とされています)。
  
  こうしてみると、NFTに必要な実装は意外と少ないような気がしませんか？`,
  page24_3: ``,
  page24_4: ``,
  page24_5: ``,
  page25_1: `1つのステート（変数）: totalSupply

  Flowブロックチェーンでは、コントラクトの直下に配置される変数をStateと呼ぶ。この値は、スマートコントラクトの状態を表し、この値はスマートコントラクトの現在の情報を意味する。コントラクト直下に配置されるメソッドは、ロジックと呼ばれる。ロジックは、スマートコントラクトの情報をどのように変更するかを定義します。`,
  page25_2: `3つのイベントがあります: ContractInitialized、Withdraw、Depositの3つです。

  イベントは、ブロックチェーン上で何かが変更されたときに通知されたいときのためのものです。詳しくは、「9. Query for Events（イベント通知の取得方法）」をご覧ください。`,
  page25_3: `4つのリソースインターフェイス ： INFT、Provider、Receiver, CollectionPublic`,
  page25_4: `2つのリソース ： NFT、コレクション`,
  page25_5: `これらの機能のみを実装したコントラクトを用意すれば、それをNFTと呼ぶことができます。
  NFTリソースはNFT固有の情報を含む本体であり、Collectionはこれらのリソースを格納するオブジェクトです。このオブジェクトのおかげで、アカウントのストレージへのパスを1つにして複数のNFTを持つことが可能です。(詳細は「3 NFTの作成方法」を参照)。`,
  page26_1: `リソースインターフェースINFTは、NFTリソースが準拠しなければならないメソッドとその他の情報を定義しています。

  Provider、Receiver、CollectionPublic リソースインターフェイスでは、Collection リソースが準拠すべきメソッドを定義しています。
  
  Receiverには、入金を行うためのメソッドである "Deposit "メソッドがあります。一般的には、銀行などの振込入金と同じで、入金側の承認は必要ないはずです。
  
  もちろん、Smart Contractで承認を必要とするようにすることも可能ですが、NFTの場合はその必要はありません。
  
  Providerは、コレクションからNFTを取り出すために使用される "withdraw "メソッドを持っています。したがって、このインターフェースは、NFT を所有する人だけの Capability に設定されています。
  
  CollectionPublicはインターフェース名に "Public "が付いているので、認証を必要としないPublicなCapabilityに設定されたメソッドを定義していると考えてもよいでしょう。
  
  "Collection "リソースは、Provider、Receiver、CollectionPublicの各インターフェースに準拠した構造になっているはずです。
  
  Collectionは、ブロックチェーン上で見た場合、アカウントが保有するリソースの一番外側となるため、Public CapabilityとPrivate Capabilityを用意することでリソースを安全に保有できるため、この2種類に対応したインターフェースを用意することが推奨されます。そのため、対応するインターフェースを用意することが重要です。
  
  ちなみに、リソースホルダーには通常、リソースの全実行権が付与されます。(リソース所有者は、リソースを譲渡する際にCapabilityは必要ありません。詳しくは「7 Private Capabilities」を参照。)`,
  page26_2: ``,
  page26_3: ``,
  page26_4: ``,
  page26_5: ``,
  page27_1: `5 . 4 NFTコントラクト

  Play Groundでは、1つのアカウントに1つのコントラクトしかデプロイできません。そこで、NFTスマートコントラクトをアカウント0x02にデプロイしてみます。
  
  0x02 をクリックし、画面上に以下のコードを打ち込みます。`,
  page27_2: `次に、このコントラクトをインターフェースに準拠させます。以下の赤で示したようなコードを追加してください。`,
  page27_3: `このとき、Play Groundにエラーが表示されるはずです。これは、スマートコントラクトが実装しなければならない項目がインターフェースに含まれており、これらの項目が実装されていないためです。`,
  page27_4: ``,
  page27_5: ``,
  page28_1: `スマートコントラクトに実装すべき項目を実装します。まず、以下の赤で示したようなイベントのコードを追加します。`,
  page28_2: `これはEventを定義しています。イベントはメソッドですが、pub eventで定義すればOKです。イベントを発生させたいときは、このメソッドを呼び出します。
  そうすると、ブロックチェーンからの通知を受け取ることができるようになります。`,
  page28_3: `次に、下図の赤のようにStatesを追加します。`,
  page28_4: `Stateは必ずinitで初期化する必要があり、Init処理はContractだけでなく、ResourceやStructでも必要です。`,
  page28_5: ``,
  page29_1: `次に、以下の赤で示したように、NFTリソースのコードを追加します。`,
  page29_2: `このNFTは、アカウントストレージに格納したいリソースの本体です。このメソッドに、必要なメソッドやステートを追加していくことになります。ただし、このドキュメントでは、id のみを実装することにします。`,
  page29_3: `次に、このリソースをNFT規格に準拠させたいので、以下の赤で示したようなインターフェースを追加します。`,
  page29_4: ``,
  page29_5: ``,
  page30_1: `次に、下図の赤のように、NFTを格納するコレクションリソースを追加します。`,
  page30_2: `リソースを作成する場合は、'<-'が必要です。`,
  page30_3: `(省略)`,
  page30_4: `ここで、このCollectionをNFT Contractインターフェースに準拠させます。以下を追加してください。`,
  page30_5: ``,
  page31_1: `次に、コレクションリソースに、リソースインタフェースに準拠するために必要なロジックを追加します。以下の赤字の部分を追加します。`,
  page31_2: `そのメソッドはすべて、3つのインターフェースに準拠するように実装する必要があります。

  "deposit "メソッド："as!"でダウンキャストすることで、このスマートコントラクトで定義されたステートやメソッドにアクセスすることができます。ダウンキャストの詳細については、「3.NFTの作成方法」を参照してください。
  
  「withdraw "メソッド：コレクションからNFTを1つ削除して返します。
  他のストレージに格納されるか、破棄されることが確認できるまで、処理中にエラーが発生します。したがって、Flowは、リソースが失われることがないという意味で、安全な設計になっていると言えます。
  
  "borrowNFT "メソッド：リソースへの参照を返す。参照なので、リソースが移動することはなく、安全にコードを書くことができます。
  Optional Referenceの実装では、ここで以下のようなBreaking Changeが発生しました。
   
   &self.ownedNFTs[id] as &NonFungibleToken.NFT.
  
  は問題なかったのですが、現在は
  
   (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!　となります。
  
  Optional Referencesの詳細については、17 Optional Referencesのセクションを参照してください。
  
  "getIDs "メソッド：NFT IDのリストを返します。`,
  page31_3: ``,
  page31_4: ``,
  page31_5: ``,
  page32_1: `createEmptyCollection メソッドを実装します。`,
  page32_2: `このコントラクトは、NonFungibleTokenコントラクトのインターフェースに準拠しています。右上の「Deploy」ボタンをクリックしてデプロイしてください。
  デプロイできない旨のメッセージが表示された場合は、ブラウザをリロードして、0x01から再度「Deploy」ボタンをクリックしてみてください。`,
  page32_3: `最後に、このNFTを生成するためのメソッド、createTokenメソッドを実装します。create指示はコントラクトにしか書けないので、このメソッドはコントラクトに実装する必要があります。`,
  page32_4: `右上の「Deploy」ボタンをクリックして、これをデプロイします。`,
  page32_5: ``,
  page33_1: `最後に、NFTスマートコントラクトの全体像は以下のとおりです。`,
  page33_2: `以下のGitHubのURLには、2022年7月にFlowverseとFlow Ecosystem Networkに参加したアプリの全ソースコードが掲載されています。(コレクションはVaultという名前で使用されています)。
  このアプリはNFTを使用していなかったため、Contract Interfaceはありませんが、リソースインターフェースはアクセス制限に多用されているため、含まれています。
  
  URL: https://github.com/temt-ceo/tickets-on-flow/blob/main/cadence/Tickets.cdc
  
  Cadenceは意外とC言語っぽいので、ゲームエンジニアには親しみやすいと思います。`,
  page33_3: ``,
  page33_4: ``,
  page33_5: ``,
  page34_1: `他のアカウントにNFTを付与しよう`,
  page34_2: `では、作成したNFTをユーザーに渡してみましょう。`,
  page34_3: `赤枠の「TRANSACTION TEMPLATES」の右側の＋をクリックし、表示された「New Transaction」をクリックし、右側のスペースに以下のソースコードを記述してください。`,
  page34_4: `右上の「Send」ボタンから実行しましょう。右上に表示されるTransaction Signerは誰でもいいので、デフォルトの0x01を設定した状態で実行してみましょう。`,
  page34_5: ``,
  page35_1: `このトランザクションは、NFT コレクションのリソースをアカウントのストレージに保存します。このリソースが保存されているストレージへのパスは/storage/であり、このパスにはアカウント自身しかアクセスできない。そこで、誰でもアクセスできるように、Public Capability を作成しました。
  Public Capabilityは、リソースインターフェイスを持つlinkメソッドで指定します。
  
  AuthAccount.link<& リソース名 {リソースインタフェース}>(destination, target: リソース位置)
  
  とする。リソースインターフェースは、そのリソースインターフェースで定義されたメソッドにしかアクセスできないため、ここではNonFungibleToken.CollectionPublicで定義されたメソッドにしかアクセスできないCapabilityがストレージの/public/パスに格納されています。
  
  
  次に、このアカウントで作成されたコレクションにNFTを挿入するためのTransactionを実行します。`,
  page35_2: ``,
  page35_3: ``,
  page35_4: ``,
  page35_5: ``,
  page36_1: `右上の「Send」ボタンから実行してみましょう。右上に表示されているTransaction SignerにCollectionを持つ0x01を設定します。`,
  page36_2: `このトランザクションは、NFT コレクション内のリソースへの参照を取得しています。

  このTransactionはコレクションの所有者によって認可され実行されているので、リソースを見るために/storage/のパスに直接行くことができます。
  
  次の行で、<-ディレクティブで作成したNFTを、コレクションのリソースに格納しています。
  
  少し、内容が寂しいですが、これで、NFTをCollectionに保存しました。次に、もう少し実用的なゲームのシステムを作ってみましょう。`,
  page36_3: ``,
  page36_4: ``,
  page36_5: ``,
  page37_1: `本物のDappsを作ろう`,
  page37_2: `作成するDApps`,
  page37_3: `ブロックチェーンの更新をリアルタイムにユーザーに通知するシステムを作ります。
  使用する技術は、ブロックチェーンにFlow Blockchain、クラウドサーバーにAWS DynamoDBとAppSync、システム構築にはGraphQLに対応したAWS Amplifyを使用する予定です。以下の構成図でシステムを作成します。`,
  page37_4: `具体的には、トレーディングカードの交換をブロックチェーン上に保存します。交換が発生すると、ブロックチェーン上にイベントが生成されます。
  そのイベントはDynamoDBに格納され、ユーザーのアプリケーションにリアルタイムで通知されます。
  
  3.5節で述べたように、Amplifyではフロントエンドのソースコードを書きながらクラウドサーバーのソースコードも書けるので、開発の効率が格段に上がります。
  AWSのAmplifyやGoogleCloudのFirebaseは、バックエンドとフロントエンドのソースコードを1つのリポジトリにまとめることができます。
  
  このAmplifyの仕組みを利用して、1時間以内に構築できる本格的なアプリケーションを構築していきます。`,
  page37_5: ``,
  page38_1: `AmplifyとNuxt.jsの環境構築`,
  page38_2: `まず、構成図の下の赤枠の部分を作ります。`,
  page38_3: `Node.jsとAWS Amplify CLIは既にインストールされている前提で話を進めます。`,
  page38_4: `Amplify CLIのインストール方法については、AWSの公式サイトをご参照ください。`,
  page38_5: ``,
  page39_1: `Amplifyを構築するためのIAM Userを作成します。以下のコマンドを実行します。`,
  page39_2: `1. Web Blowserが起動し、表示された画面でAWSにサインインします。
  サインインが完了したら、Terminal画面に戻り、Enterキーを押します。
2. Terminal画面でAWS Regionを選択します（下図参照）。`,
  page39_3: `新規作成するIAMユーザーの名前を入力します。(flowEvents)`,
  page39_4: `IAMユーザー名を入力すると、Webブラウザーに以下の画面が表示されます。
  「Next」を数回押し、「Create User」ボタンをクリックします。`,
  page39_5: ``,
  page40_1: `4. IAMユーザーの作成が完了したら、Terminal画面に戻り、Enterキーを押します。`,
  page40_2: `5. アクセスキーID、シークレットアクセスキーの欄に、先ほど作成したユーザーの情報を入力してください。`,
  page40_3: `6. プロファイル名を "default "と入力し、セットアップを終了します。`,
  page40_4: ``,
  page40_5: ``,
  page41_1: `次に、Nuxt3アプリケーションを作成しますので、Terminal上で以下のコマンドを実行します。`,
  page41_2: `Nuxt.jsのバージョン3.0を使用してください。`,
  page41_3: `Terminalで以下のコマンドを実行します。`,
  page41_4: ``,
  page41_5: ``,
  page42_1: `最後に、Amplifyシステムの基盤を構築します。
  Terminalで以下のコマンドを実行します。`,
  page42_2: ``,
  page42_3: ``,
  page42_4: ``,
  page42_5: ``,
  page43_1: `GraphQL APIの追加`,
  page43_2: `AmplifyでAppSyncによるAPIを作成します。(下図の赤枠部分)`,
  page43_3: `次のコマンドを実行します。`,
  page43_4: `1. 設定の最初でGraphQLを選択します。
  2. Authorization modes を選択します。(上を2回押してEnterを押す)。
  3. Amazon Cognito User Poolを選択します。
  4. 後は、デフォルトで良いので、適当にEnterを押し続ける。
  5. 作成が完了すると、/amplify/backend/apiフォルダが作成されるのが確認できます。`,
  page43_5: ``,
  page44_1: `aws-exports.jsの作成`,
  page44_2: `以下のコマンドを実行し、NuxtアプリケーションがAmplifyと接続するための設定ファイルを作成します。`,
  page44_3: `デフォルトの設定で問題ないと思いますので、「Enter」を入力すると、Amplifyコマンドが処理を開始します。このデプロイ処理には少し時間がかかるので、次の「7.5 NuxtアプリをAppSyncで接続する」に進みましょう。
  NuxtアプリとAmplifyを接続するための設定ファイルaws-exports.jsは、デプロイを開始する直前に作成されます。aws-exports.jsはsrcフォルダ以下に作成されますが、設定値によってファイルの場所は変わります。`,
  page44_4: ``,
  page44_5: ``,
  page45_1: `NuxtアプリとAppSyncの接続`,
  page45_2: `Terminalで以下のコマンドを実行します。`,
  page45_3: `Nuxtアプリケーションに必要なライブラリのインストールが完了するまで待ちます。`,
  page45_4: `pluginsフォルダにamplify.jsというファイルを作成します。
  そして、次のように入力します。`,
  page45_5: `NuxtアプリとAmplifyを接続するための設定ファイルです。詳しくはAWSの公式サイトをご参照ください。`,
  page46_1: `次に、nuxt.config.tsファイルを以下のように変更します。`,
  page46_2: `サーバーサイド・レンダリング・モードを無効にするため、"ssr: false "を設定し、Amplifyのエラーを回避する。
  その他の設定は、Nuxt3が比較的新しいフレームワークであるため、エラーを回避するためのものです。`,
  page46_3: ``,
  page46_4: ``,
  page46_5: ``,
  page47_1: `次に、「pages」フォルダーにindex.vueというファイルを作成します。
  そして、次のように入力します。`,
  page47_2: `今回は、Amplifyがデフォルトで提供しているTodoスキーマを使用します。このTodoのサンプルを元に、簡単にGraphQL APIを作成することができます。`,
  page47_3: `次に、次の画像のように、プロジェクトのルートフォルダ内のapp.vueを変更します。`,
  page47_4: `これで準備は完了です。`,
  page47_5: ``,
  page48_1: `Nuxtアプリをローカルで実行してみる`,
  page48_2: `Terminal上で "npm run dev "が実行されていない場合は、以下のコマンドを実行します。`,
  page48_3: `localhost:3000にアクセスします。以下の画面が表示されます。`,
  page48_4: `Apple ID、Google、Facebookなどでのログインや、パスワードの強弱の設定が可能です。これらのログイン設定は、以下のURLで変更することができます。`,
  page48_5: `これはAmplifyのAuth機能です。この認証に使用するデータはAWS CognitoのUser Poolで管理されています。

  Cognitoサービスからユーザープールを選択し、左のメニューからUsers and Groupsを選択すると、登録されているユーザー情報を確認することができます。
  
  では、アカウントを作成し、サインインしてみましょう。必要なのはメールアドレスだけです。`,
  page49_1: `AppSyncで最初から作成されたTodoデータを表示する`,
  page49_2: `サインイン後、以下の画面が表示されます。`,
  page49_3: `左上のSign Outボタンをクリックすることでサインアウトできます。
  では、AppSync で最初から提供されている GraphQL Todo スキーマの「Create」「Subscribe」メソッドを実装してみましょう。
  赤字で示したソースコードを追加します。`,
  page49_4: `/pages/index.vueに、createTodoメソッドを呼び出すボタンを作成します。`,
  page49_5: ``,
  page50_1: `Amplifyが用意したTodoスキーマは、新たに登録された値をAWSのクラウドサービスであるDynamoDBに保存します。
  また、保存されたデータは、GraphQLという仕組みを使ってリアルタイムに取得することができます。`,
  page50_2: `最後に、schema.graphql の5行目を以下のように変更し、AppSync の認証ルールを修正します。`,
  page50_3: `"allow: private" ルールは、サインインしたユーザーによる実行を許可します。`,
  page50_4: `最後に、設定の変更をAmplifyにプッシュします。`,
  page50_5: `localhost:3000の画面をWebブラウザで表示してみましょう。
  以下のように表示されます。
  赤枠のテキストボックスに値を入れて、「作成」ボタンをクリックしてみましょう。`,
  page51_1: ``,
  page51_2: ``,
  page51_3: ``,
  page51_4: ``,
  page51_5: ``,
  page52_1: `これで画面に以下のように表示されるはずです。`,
  page52_2: `作成ボタンをクリックすると、DynamoDBに値が格納されます。同時に、その値がリアルタイムで取得され、画面に表示されます。
  別タブでlocalhost:3000を開き、Createボタンを押してみてください。別タブでリアルタイムに値が表示されます。`,
  page52_3: `これで、GraphQL、AppSync、DynamoDB、Nuxt3の連携システムの基礎が完成しました。次に、定期的に外部データを取得するLambda Functionを作成します。`,
  page52_4: ``,
  page52_5: ``,
  page53_1: `Lambda Functionの追加`,
  page53_2: `Amplifyに定期的に外部データを取得するバッチFunctionを追加します。(下図の赤枠の部分）`,
  page53_3: `Lambda FunctionはCognito User Poolの認証が使えないので、GraphQLの設定にIAM認証の権限を追加します。`,
  page53_4: `下図を参考に、AuthorizationモードにAmazon Cognito User Poolに加え、IAM認証を追加してください。`,
  page53_5: ``,
  page54_1: `次に、Terminal上で以下のコマンドを実行し、Lambda Functionを追加します。`,
  page54_2: ` 1. serverless function」を選択します。
  2. Function名を入力します。(例:cronBatchForEvents)
  3. Node.jsを選択します。
  4. AppSync - GraphQL API request (with IAM)を選択します。
  5. "y "を入力
  6. "y"を入力(Do you want to access other resources in this project from your Lambda function?)
  7. カーソルをapiに移動し、スペースキーを押した後、Enterキーを押す。
  8. カーソルを「Query」「Mutation」に合わせ、スペースキーを押し、Enterキーを押す。
  9.  "y "を入力（Do you want to invoke this function on a recurring schedule?）。
  10. "Minutes "を選択します。
  11.  "3 "を入力（Enter the rate in minutes:）。
  12. "n "を入力
  13. その後、デフォルトで良いのでEnterを押してください。
  14. "Do you want to edit the local lambda function now?" と聞かれたら、"n" を入力します。`,
  page54_3: `コマンドを実行すると、/amplify/backend/function/cronBatchForEventsが作成されます。`,
  page54_4: ``,
  page54_5: ``,
  page55_1: `途中で選択を間違えた場合は、以下のコマンドを実行することで削除することができます。`,
  page55_2: `ランタイムやメモリーサイズを変更するには、amplify/backend/function/cronBatchForEvents/cronBatchForEvents-cloudformation-template.jsonを変更します。
  メモリサイズを変更するには、「Runtime」の下に「MemorySize」キーを追加し、指定したいメモリサイズを指定します。
  1024MBは、["MemorySize": "1024"]と設定することで指定可能です。`,
  page55_3: `また、このLambdaはTerminal上で実行することも可能です。以下のコマンドを実行します。`,
  page55_4: ``,
  page55_5: ``,
  page56_1: `/amplify/backend/function/cronBatchForEvents/src/index.js は以下のような内容です。すでにGraphQLに対してQueryするように実装済みで、このままでも動作します。`,
  page56_2: ``,
  page56_3: ``,
  page56_4: ``,
  page56_5: ``,
  page57_1: `このソースコードは、Amplifyにプッシュしてから3分ごとに実行されます。
  また、ソースコードの中には、GraphQLにアクセスするためのURLを提供する環境変数が用意されています。`,
  page57_2: `Amplifyの設定変更を展開するためにAmplifyにプッシュする`,
  page57_3: `AWSコンソールのLambdaページを開き、cronBatchForEvents-devをクリックすると、その情報が表示されます。ページ下部にある、下図赤枠の「Monitor」「Logs」をクリックすると、Lambda Functionのログを表示する画面が表示されます。このログは3分ごとに生成されます。
  LogStreamのリンクをクリックすると、このLambda Functionのconsole.logで記録された内容を確認することができます。`,
  page57_4: ``,
  page57_5: ``,
  page58_1: `Lambda関数の実装`,
  page58_2: `Lambda FunctionからGraphQLへの "Mutaion "を実行するコードを入力します。以下の赤字の部分を追加・変更してください。`,
  page58_3: "GraphQL の `query LIST_TODOS` を呼び出す代わりに、`mutation CreateTodo` を呼び出すようにソースコードを変更しました。",
  page58_4: ``,
  page58_5: ``,
  page59_1: `最後に、Lambda Functionの変更をAmplifyにプッシュします。`,
  page59_2: `設定変更はAWS Amplifyに反映されます。`,
  page59_3: `index.jsの "return "の直前に以下のコードを埋め込むと、ログで動作確認がしやすくなります。`,
  page59_4: `localhost:3000の画面を見てみましょう。3分ごとに画面表示が変化しているのがわかります。`,
  page59_5: ``,
  page60_1: `Flow Blockchainからイベントを取得する`,
  page60_2: `このGraphQLのTodo SchemaとLambda Functionを使って、Flow Blockchainからイベントを取得し、同時にlocalhost:3000の画面に表示させてみましょう。`,
  page60_3: ``,
  page60_4: ``,
  page60_5: ``,
  page61_1: ``,
  page61_2: ``,
  page61_3: ``,
  page61_4: ``,
  page61_5: ``,
  page62_1: ``,
  page62_2: ``,
  page62_3: ``,
  page62_4: ``,
  page62_5: ``,
  page63_1: ``,
  page63_2: ``,
  page63_3: ``,
  page63_4: ``,
  page63_5: ``,
  page64_1: `Lambda FunctionからDynamoDBにアクセスするための設定`,
  page64_2: `次に、Lambda FunctionからDynamoDBにアクセスするためのPolicyを設定します。

  7 . 10 . 1  DynamoDBにあるテーブル名をコピーします。`,
  page64_3: `Lambda Functionのページを開き、下にスクロールします。`,
  page64_4: ``,
  page64_5: ``,
  page65_1: `[Configuration]タブをクリックし、[Environment variable`,
  page65_2: `KEYにTODOTABLEと入力し、Valueに先ほどコピーしたDynamoDBテーブル名を貼り付けて、Saveをクリックします。`,
  page65_3: ``,
  page65_4: ``,
  page65_5: ``,
  page66_1: `次に、DynamoDBに値を投入するためのLambda Functionを認可します。`,
  page66_2: `Lambda FunctionのPermissionsをクリックします。`,
  page66_3: `表示されたページの上部にある「Role」名をクリックします。`,
  page66_4: ``,
  page66_5: ``,
  page67_1: `表示された画面で「ポリシーの追加」をクリックし、「インライン・ポリシーの作成」をクリックします。`,
  page67_2: `表示された画面で［JSON］をクリックします。`,
  page67_3: ``,
  page67_4: ``,
  page67_5: ``,
  page68_1: `Webブラウザで別のタブを開き、DynamoDBのページを表示します。対象のテーブルを選択します。`,
  page68_2: `General Informationの下にあるAdditional Infoをクリックするとトグルが開き、DynamoテーブルのARNをコピーします。`,
  page68_3: `以下のように編集します。dynamodb:PutItemのActionを、DynamoテーブルのARNに対してAllowに編集します。編集後、右下のPreview policyをクリックします。`,
  page68_4: ``,
  page68_5: ``,
  page69_1: `"Name"欄にポリシー名を入力し、右下の"Create Policy"ボタンをクリックします。`,
  page69_2: ``,
  page69_3: ``,
  page69_4: ``,
  page69_5: ``,
  page70_1: ``,
  page70_2: ``,
  page70_3: ``,
  page70_4: ``,
  page70_5: ``,
  page71_1: ``,
  page71_2: ``,
  page71_3: ``,
  page71_4: ``,
  page71_5: ``,
  page72_1: ``,
  page72_2: ``,
  page72_3: ``,
  page72_4: ``,
  page72_5: ``,
  page73_1: ``,
  page73_2: ``,
  page73_3: ``,
  page73_4: ``,
  page73_5: ``,
  page74_1: ``,
  page74_2: ``,
  page74_3: ``,
  page74_4: ``,
  page74_5: ``,
  page75_1: ``,
  page75_2: ``,
  page75_3: ``,
  page75_4: ``,
  page75_5: ``,
  page76_1: ``,
  page76_2: ``,
  page76_3: ``,
  page76_4: ``,
  page76_5: ``,
  page77_1: ``,
  page77_2: ``,
  page77_3: ``,
  page77_4: ``,
  page77_5: ``,
  page78_1: ``,
  page78_2: ``,
  page78_3: ``,
  page78_4: ``,
  page78_5: ``,
  page79_1: ``,
  page79_2: ``,
  page79_3: ``,
  page79_4: ``,
  page79_5: ``,
  page80_1: ``,
  page80_2: ``,
  page80_3: ``,
  page80_4: ``,
  page80_5: ``,
  page81_1: ``,
  page81_2: ``,
  page81_3: ``,
  page81_4: ``,
  page81_5: ``,
  page82_1: ``,
  page82_2: ``,
  page82_3: ``,
  page82_4: ``,
  page82_5: ``,
  page83_1: ``,
  page83_2: ``,
  page83_3: ``,
  page83_4: ``,
  page83_5: ``,
  page84_1: ``,
  page84_2: ``,
  page84_3: ``,
  page84_4: ``,
  page84_5: ``,
  page85_1: ``,
  page85_2: ``,
  page85_3: ``,
  page85_4: ``,
  page85_5: ``,
  page86_1: ``,
  page86_2: ``,
  page86_3: ``,
  page86_4: ``,
  page86_5: ``,
  page87_1: ``,
  page87_2: ``,
  page87_3: ``,
  page87_4: ``,
  page87_5: ``,
  page88_1: ``,
  page88_2: ``,
  page88_3: ``,
  page88_4: ``,
  page88_5: ``,
  page89_1: ``,
  page89_2: ``,
  page89_3: ``,
  page89_4: ``,
  page89_5: ``,
  page90_1: ``,
  page90_2: ``,
  page90_3: ``,
  page90_4: ``,
  page90_5: ``,
  page91_1: ``,
  page91_2: ``,
  page91_3: ``,
  page91_4: ``,
  page91_5: ``,
  page92_1: ``,
  page92_2: ``,
  page92_3: ``,
  page92_4: ``,
  page92_5: ``,
  page93_1: ``,
  page93_2: ``,
  page93_3: ``,
  page93_4: ``,
  page93_5: ``,
  page94_1: ``,
  page94_2: ``,
  page94_3: ``,
  page94_4: ``,
  page94_5: ``,
  page95_1: ``,
  page95_2: ``,
  page95_3: ``,
  page95_4: ``,
  page95_5: ``,
  page96_1: ``,
  page96_2: ``,
  page96_3: ``,
  page96_4: ``,
  page96_5: ``,
  page97_1: ``,
  page97_2: ``,
  page97_3: ``,
  page97_4: ``,
  page97_5: ``,
  page98_1: ``,
  page98_2: ``,
  page98_3: ``,
  page98_4: ``,
  page98_5: ``,
  page99_1: ``,
  page99_2: ``,
  page99_3: ``,
  page99_4: ``,
  page99_5: ``,
  page100_1: `Nuxt.jsとFlow Blockchainの接続を設定する。`,
  page100_2: `Terminalで以下のコマンドを実行します。`,
  page100_3: `Nuxt.jsがFlow Blockchainに接続するように設定します。plugins フォルダ下に flow.client.js ファイルを以下のように作成します。`,
  page100_4: ``,
  page100_5: ``,
  page101_1: `次のコードを入力してください。`,
  page101_2: `このコードは、以下のURLのウェブページに掲載されています。
  https://github.com/brunogonzales/fcl-nuxt-starter/blob/main/plugins/fcl.client.js
  このURLはFlow Coreチームから共有されたものですので、fcl接続の変更のアナウンスがあった場合は、この情報を参照するとよいでしょう。`,
  page101_3: ``,
  page101_4: ``,
  page101_5: ``,
  page102_1: `現在のpackage.jsonは以下のようになっているはずです（バージョンは同じである必要はありません）。`,
  page102_2: ``,
  page102_3: ``,
  page102_4: ``,
  page102_5: ``,
  page103_1: `Nuxt.jsでFlow Blockchainのウォレット画面を呼び出す`,
  page103_2: `pages/index.vueに以下を追加します。`,
  page103_3: `この状態で画面を表示すると、次のように表示されます。`,
  page103_4: ``,
  page103_5: ``,
  page104_1: `ウェブブラウザで http://localhost:3000/ にアクセス`,
  page104_2: `次に、「Wallet Log In」ボタンをクリックすると、以下の画面が表示されます。この画面は、Flow Blockchainのウォレット画面です。`,
  page104_3: `上部にあるBloctoをクリックします。BloctoはFlow Blockchainのデファクトスタンダードウォレットです。`,
  page104_4: ``,
  page104_5: ``,
  page105_1: `7 . 12 . 3  Bloctoに新規アカウント登録する`,
  page105_2: `Bloctoにまだアカウントを登録していない場合は、Email欄にメールアドレスを入力し、登録ボタンをクリックします。
  すでにアカウントをお持ちの方は、メールアドレスを入力し、サインインしてください。`,
  page105_3: `ユーザーのウォレットアドレスを表示する`,
  page105_4: `pages/index.vueの3行目に以下の文章を追加してください。そして、Bloctoのウォレットでログインします。以下のようにウォレットアドレスが表示されます。`,
  page105_5: `ユーザーのウォレットアドレスは、fcl.currentUser.subscribe メソッドで取得した user?addr の値である。`,
  page106_1: `Bloctoウォレットからログアウトする`,
  page106_2: `pages/index.vueの8行目に、ログアウトボタンを追加します。以下のようにします。`,
  page106_3: `fcl.unauthenticate メソッドは flowWalletLogout メソッドの中で実行されます。`,
  page106_4: ``,
  page106_5: ``,
  page107_1: ``,
  page107_2: ``,
  page107_3: ``,
  page107_4: ``,
  page107_5: ``,
  page108_1: ``,
  page108_2: ``,
  page108_3: ``,
  page108_4: ``,
  page108_5: ``,
  page109_1: ``,
  page109_2: ``,
  page109_3: ``,
  page109_4: ``,
  page109_5: ``,
  page110_1: ``,
  page110_2: ``,
  page110_3: ``,
  page110_4: ``,
  page110_5: ``,
  page111_1: ``,
  page111_2: ``,
  page111_3: ``,
  page111_4: ``,
  page111_5: ``,
  page112_1: ``,
  page112_2: ``,
  page112_3: ``,
  page112_4: ``,
  page112_5: ``,
  page113_1: ``,
  page113_2: ``,
  page113_3: ``,
  page113_4: ``,
  page113_5: ``,
  page114_1: ``,
  page114_2: ``,
  page114_3: ``,
  page114_4: ``,
  page114_5: ``,
  page115_1: ``,
  page115_2: ``,
  page115_3: ``,
  page115_4: ``,
  page115_5: ``,
  page116_1: ``,
  page116_2: ``,
  page116_3: ``,
  page116_4: ``,
  page116_5: ``,
  page117_1: ``,
  page117_2: ``,
  page117_3: ``,
  page117_4: ``,
  page117_5: ``,
  page118_1: ``,
  page118_2: ``,
  page118_3: ``,
  page118_4: ``,
  page118_5: ``,
  page119_1: ``,
  page119_2: ``,
  page119_3: ``,
  page119_4: ``,
  page119_5: ``,
  page120_1: ``,
  page120_2: ``,
  page120_3: ``,
  page120_4: ``,
  page120_5: ``,
  page121_1: ``,
  page121_2: ``,
  page121_3: ``,
  page121_4: ``,
  page121_5: ``,
  page122_1: ``,
  page122_2: ``,
  page122_3: ``,
  page122_4: ``,
  page122_5: ``,
  page123_1: ``,
  page123_2: ``,
  page123_3: ``,
  page123_4: ``,
  page123_5: ``,
  page124_1: ``,
  page124_2: ``,
  page124_3: ``,
  page124_4: ``,
  page124_5: ``,
  page125_1: ``,
  page125_2: ``,
  page125_3: ``,
  page125_4: ``,
  page125_5: ``,
  page126_1: ``,
  page126_2: ``,
  page126_3: ``,
  page126_4: ``,
  page126_5: ``,
  page127_1: ``,
  page127_2: ``,
  page127_3: ``,
  page127_4: ``,
  page127_5: ``,
  page128_1: ``,
  page128_2: ``,
  page128_3: ``,
  page128_4: ``,
  page128_5: ``,
  page129_1: ``,
  page129_2: ``,
  page129_3: ``,
  page129_4: ``,
  page129_5: ``,
  page130_1: ``,
  page130_2: ``,
  page130_3: ``,
  page130_4: ``,
  page130_5: ``,
  page131_1: ``,
  page131_2: ``,
  page131_3: ``,
  page131_4: ``,
  page131_5: ``,
  page132_1: ``,
  page132_2: ``,
  page132_3: ``,
  page132_4: ``,
  page132_5: ``,
  page133_1: ``,
  page133_2: ``,
  page133_3: ``,
  page133_4: ``,
  page133_5: ``,
  page134_1: ``,
  page134_2: ``,
  page134_3: ``,
  page134_4: ``,
  page134_5: ``,
  page135_1: ``,
  page135_2: ``,
  page135_3: ``,
  page135_4: ``,
  page135_5: ``,
  page136_1: ``,
  page136_2: ``,
  page136_3: ``,
  page136_4: ``,
  page136_5: ``,
  page137_1: ``,
  page137_2: ``,
  page137_3: ``,
  page137_4: ``,
  page137_5: ``,
  page138_1: ``,
  page138_2: ``,
  page138_3: ``,
  page138_4: ``,
  page138_5: ``,
  page139_1: ``,
  page139_2: ``,
  page139_3: ``,
  page139_4: ``,
  page139_5: ``,
  page140_1: ``,
  page140_2: ``,
  page140_3: ``,
  page140_4: ``,
  page140_5: ``,
  page141_1: ``,
  page141_2: ``,
  page141_3: ``,
  page141_4: ``,
  page141_5: ``,
  page142_1: ``,
  page142_2: ``,
  page142_3: ``,
  page142_4: ``,
  page142_5: ``,
  page143_1: ``,
  page143_2: ``,
  page143_3: ``,
  page143_4: ``,
  page143_5: ``,
  page144_1: ``,
  page144_2: ``,
  page144_3: ``,
  page144_4: ``,
  page144_5: ``,
  page145_1: ``,
  page145_2: ``,
  page145_3: ``,
  page145_4: ``,
  page145_5: ``,
  page146_1: ``,
  page146_2: ``,
  page146_3: ``,
  page146_4: ``,
  page146_5: ``,
  page147_1: ``,
  page147_2: ``,
  page147_3: ``,
  page147_4: ``,
  page147_5: ``,
  page148_1: ``,
  page148_2: ``,
  page148_3: ``,
  page148_4: ``,
  page148_5: ``,
  page149_1: ``,
  page149_2: ``,
  page149_3: ``,
  page149_4: ``,
  page149_5: ``,
  page150_1: ``,
  page150_2: ``,
  page150_3: ``,
  page150_4: ``,
  page150_5: ``,
  page151_1: ``,
  page151_2: ``,
  page151_3: ``,
  page151_4: ``,
  page151_5: ``,
  page152_1: ``,
  page152_2: ``,
  page152_3: ``,
  page152_4: ``,
  page152_5: ``,
  page153_1: ``,
  page153_2: ``,
  page153_3: ``,
  page153_4: ``,
  page153_5: ``,
  page154_1: ``,
  page154_2: ``,
  page154_3: ``,
  page154_4: ``,
  page154_5: ``,
  page155_1: ``,
  page155_2: ``,
  page155_3: ``,
  page155_4: ``,
  page155_5: ``,
  page156_1: ``,
  page156_2: ``,
  page156_3: ``,
  page156_4: ``,
  page156_5: ``,
  page157_1: ``,
  page157_2: ``,
  page157_3: ``,
  page157_4: ``,
  page157_5: ``,
  page158_1: ``,
  page158_2: ``,
  page158_3: ``,
  page158_4: ``,
  page158_5: ``,
  page159_1: ``,
  page159_2: ``,
  page159_3: ``,
  page159_4: ``,
  page159_5: ``,
  page160_1: ``,
  page160_2: ``,
  page160_3: ``,
  page160_4: ``,
  page160_5: ``,
  page161_1: ``,
  page161_2: ``,
  page161_3: ``,
  page161_4: ``,
  page161_5: ``,
  page162_1: ``,
  page162_2: ``,
  page162_3: ``,
  page162_4: ``,
  page162_5: ``,
  page163_1: ``,
  page163_2: ``,
  page163_3: ``,
  page163_4: ``,
  page163_5: ``,
  page164_1: ``,
  page164_2: ``,
  page164_3: ``,
  page164_4: ``,
  page164_5: ``,
  page165_1: ``,
  page165_2: ``,
  page165_3: ``,
  page165_4: ``,
  page165_5: ``,
  page166_1: ``,
  page166_2: ``,
  page166_3: ``,
  page166_4: ``,
  page166_5: ``,
  page167_1: ``,
  page167_2: ``,
  page167_3: ``,
  page167_4: ``,
  page167_5: ``,
  page168_1: ``,
  page168_2: ``,
  page168_3: ``,
  page168_4: ``,
  page168_5: ``,
  page169_1: ``,
  page169_2: ``,
  page169_3: ``,
  page169_4: ``,
  page169_5: ``,
  page170_1: ``,
  page170_2: ``,
  page170_3: ``,
  page170_4: ``,
  page170_5: ``,
  page171_1: ``,
  page171_2: ``,
  page171_3: ``,
  page171_4: ``,
  page171_5: ``,
  page172_1: ``,
  page172_2: ``,
  page172_3: ``,
  page172_4: ``,
  page172_5: ``,
  page173_1: ``,
  page173_2: ``,
  page173_3: ``,
  page173_4: ``,
  page173_5: ``,
  page174_1: ``,
  page174_2: ``,
  page174_3: ``,
  page174_4: ``,
  page174_5: ``,
  page175_1: ``,
  page175_2: ``,
  page175_3: ``,
  page175_4: ``,
  page175_5: ``,
  page176_1: ``,
  page176_2: ``,
  page176_3: ``,
  page176_4: ``,
  page176_5: ``,
  page177_1: ``,
  page177_2: ``,
  page177_3: ``,
  page177_4: ``,
  page177_5: ``,
  page178_1: ``,
  page178_2: ``,
  page178_3: ``,
  page178_4: ``,
  page178_5: ``,
  page179_1: ``,
  page179_2: ``,
  page179_3: ``,
  page179_4: ``,
  page179_5: ``,
  page180_1: ``,
  page180_2: ``,
  page180_3: ``,
  page180_4: ``,
  page180_5: ``,
  page181_1: ``,
  page181_2: ``,
  page181_3: ``,
  page181_4: ``,
  page181_5: ``,
  page182_1: ``,
  page182_2: ``,
  page182_3: ``,
  page182_4: ``,
  page182_5: ``,
  page183_1: ``,
  page183_2: ``,
  page183_3: ``,
  page183_4: ``,
  page183_5: ``,
  page184_1: ``,
  page184_2: ``,
  page184_3: ``,
  page184_4: ``,
  page184_5: ``,
  page185_1: ``,
  page185_2: ``,
  page185_3: ``,
  page185_4: ``,
  page185_5: ``,
  page186_1: ``,
  page186_2: ``,
  page186_3: ``,
  page186_4: ``,
  page186_5: ``,
  page187_1: ``,
  page187_2: ``,
  page187_3: ``,
  page187_4: ``,
  page187_5: ``,
  page188_1: ``,
  page188_2: ``,
  page188_3: ``,
  page188_4: ``,
  page188_5: ``,
  page189_1: ``,
  page189_2: ``,
  page189_3: ``,
  page189_4: ``,
  page189_5: ``,
  page190_1: ``,
  page190_2: ``,
  page190_3: ``,
  page190_4: ``,
  page190_5: ``,
  page191_1: ``,
  page191_2: ``,
  page191_3: ``,
  page191_4: ``,
  page191_5: ``,
  page192_1: ``,
  page192_2: ``,
  page192_3: ``,
  page192_4: ``,
  page192_5: ``,
  page193_1: ``,
  page193_2: ``,
  page193_3: ``,
  page193_4: ``,
  page193_5: ``,
  page194_1: ``,
  page194_2: ``,
  page194_3: ``,
  page194_4: ``,
  page194_5: ``,
  page195_1: ``,
  page195_2: ``,
  page195_3: ``,
  page195_4: ``,
  page195_5: ``,
  page196_1: ``,
  page196_2: ``,
  page196_3: ``,
  page196_4: ``,
  page196_5: ``,
  page197_1: ``,
  page197_2: ``,
  page197_3: ``,
  page197_4: ``,
  page197_5: ``,
  page198_1: ``,
  page198_2: ``,
  page198_3: ``,
  page198_4: ``,
  page198_5: ``,
  page199_1: ``,
  page199_2: ``,
  page199_3: ``,
  page199_4: ``,
  page199_5: ``,
}